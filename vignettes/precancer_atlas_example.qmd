---
title: "precancer_atlas_example"
vignette: >
  %\VignetteIndexEntry{precancer_atlas_example}
  %\VignetteEngine{quarto::html}
  %\VignetteEncoding{UTF-8}
knitr:
  opts_chunk:
    collapse: true
    comment: '#>'
---

```{r}
#| label: setup
options(paged.print=FALSE)
```

```{r}
library(tidyverse)
```


```{r}
devtools::load_all(".")
# seu <- readRDS("~/Documents/Work_Projects/precancer-atlas-code/data/atlas_data/main_seurat_data.RDS")
seu <- readRDS("~/Documents/Work_Projects/precancer-atlas-code/data/atlas_data/CD4T_v2_18Feb2025.RDS")
meta_data <- readr::read_tsv("~/Documents/Work_Projects/precancer-atlas-code/data/atlas_data/meta_data.tsv.gz") |>
  left_join(readRDS("~/Documents/Work_Projects/precancer-atlas-code/data/atlas_data/all_treelabels.RDS"), by = "cell_id") |>
  dplyr::select(- starts_with("manual_cell_type"))


adjusted_meta <- tibble(cell_id = colnames(seu)) |>
  left_join(meta_data, by = "cell_id") |>
  dplyr::select(-cell_id)
```


```{r}
# SeuratObject::Assays(seu)
# tmp <- seu[["RNA"]]
sce <- Seurat::as.SingleCellExperiment(seu)
rm(seu)
```



```{r}
# prepare_shiny_treelabel(seu, reduced_dims = "umap", col_data = cd4_meta)
prepare_shiny_treelabel(sce, col_data = adjusted_meta, design = ~ stage, 
                        pseudobulk_by = vars(donor), metaanalysis_over = "cancer",
                        gene_expr_by = "stage",
                        contrast = vars(cond(stage = "Pre") - cond(stage = "Normal"),
                                        cond(stage = "Tumor") - cond(stage = "Normal"),
                                        cond(stage = "Tumor") - cond(stage = "Pre")),
                        treelabels = c("label_manual", "label_immuneA", "label_lung")
                        # treelabels = c("label_manual")
                        )
.vals <- rlang::ns_env("shinyTreelabel")$.vals
backup <- rlang::ns_env("shinyTreelabel")$.vals
```




```{r}
assignInNamespace(".vals", backup, ns = "shinyTreelabel")
shiny::shinyApp(singlecell_treelabel_ui(), singlecell_treelabel_server)
```


```{r}
tibble(x = 2) |>
  ggplot(aes(y = "hello", x = x)) +
    geom_pointrange(aes(xmin = -Inf, xmax = Inf))
```

```{r}
jsonlite::toJSON(.vals$tree)
igraph::bfs(.vals$tree, root = "root", mode = "out")

root <- rlang::new_environment()
root$test <- rlang::new_environment()
root$test$hello <- rlang::new_environment(data = list(a = 1:5))
as.list(root)
```


```{r}
assignInNamespace(".vals", backup, ns = "shinyTreelabel")
shiny::shinyApp(d3_tree_ui(), d3_tree_server)
```






```{r}
sce
```

